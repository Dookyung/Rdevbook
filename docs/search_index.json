[
["index.html", "Data Scientist Handbook Welcome", " Data Scientist Handbook Dookyung Kim 2018-06-30 Welcome This is the webside for “Data Scientiest Handbook”. This book will teach you how to do data science with R: You’ll learn how to get your data into R, get it into the most useful structure, transform it, visualise it and model it. In this book, you will find a practicum of skills for data science. Just as a chemist learns how to clean test tubes and stock a lab, you’ll learn how to clean data and draw plots—and many other things besides. These are the skills that allow data science to happen, and here you will find the best practices for doing each of these things with R. You’ll learn how to use the grammar of graphics, literate programming, and reproducible research to save time. You’ll also learn how to manage cognitive resources to facilitate discoveries when wrangling, visualising, and exploring data. Want a physical copy of this material? Published by O’Reilly January 2017 First Edition. Order from amazon. This work is licensed under the Creative Commons Attribution-NonCommercial-NoDerivs 3.0 United States License. "],
["introduction.html", "Chapter 1 Introduction 1.1 What you will learn 1.2 RStudio Cheat Sheets 1.3 Colophon", " Chapter 1 Introduction Data science is an exciting discipline that allows you to turn raw data into understanding, insight, and knowledge. The goal of “Data Scientist Handbook” is to help you learn the most important tools in R that will allow you to do data science. After reading this book, you’ll have the tools to tackle a wide variety of data science challenges, using the best parts of R. 한국은행에서의 경험을 바탕으로 경제학, 리서처의 관점에서 데이터 분석과 관련한 Best Practice를 제시 1.1 What you will learn Data science is a huge field, and there’s no way you can master it by reading a single book. The goal of this book is to give you a solid foundation in the most important tools. Our model of the tools needed in a typical data science project looks something like this: 프로그램언어를 배우는 것은 언어를 배우는 것과 같음 단어와 문법을 배워야하며 세련된 방식으로 대화하기 위해서는 Best Practice를 알아야 함 가장 좋은 방법은 Cheatsheet활용, 좋은 문법책을 선택, 그 나라에서 가서 살아보기(실제 개발자들이 프로그래밍한 프로그램을 가지고 놀기) tidyverse 1.2 RStudio Cheat Sheets The cheat sheets make it easy to learn about and use some of our favorite packages. They are published in their respective PDF versions here: https://www.rstudio.com/resources/cheatsheets/, some are also available in the RStudio IDE under Help-Cheatsheets. This repository contains the source Apple Keynote files or the current, archived and translated versions. The cheat sheets use the creative commons copyright. Please see the LICENSE document for more details. 1.3 Colophon An online version of this book is available at http://r4ds.had.co.nz. It will continue to evolve in between reprints of the physical book. The source of the book is available at https://github.com/hadley/r4ds. The book is powered by https://bookdown.org which makes it easy to turn R markdown files into HTML, PDF, and EPUB. This book was built with: devtools::session_info(c(&quot;tidyverse&quot;)) #&gt; Session info ------------------------------------------------------------- #&gt; setting value #&gt; version R version 3.4.4 (2018-03-15) #&gt; system x86_64, darwin15.6.0 #&gt; ui X11 #&gt; language (EN) #&gt; collate en_US.UTF-8 #&gt; tz Asia/Seoul #&gt; date 2018-06-30 #&gt; Packages ----------------------------------------------------------------- #&gt; package * version date source #&gt; assertthat 0.2.0 2017-04-11 cran (@0.2.0) #&gt; backports 1.1.2 2017-12-13 cran (@1.1.2) #&gt; base64enc 0.1-3 2015-07-28 cran (@0.1-3) #&gt; BH 1.66.0-1 2018-02-13 CRAN (R 3.4.3) #&gt; bindr 0.1 2016-11-13 CRAN (R 3.4.0) #&gt; bindrcpp 0.2 2017-06-17 CRAN (R 3.4.0) #&gt; broom 0.4.4 2018-03-29 cran (@0.4.4) #&gt; callr 2.0.2.9001 2018-03-10 Github (r-lib/callr@3d39856) #&gt; cellranger 1.1.0 2016-07-27 CRAN (R 3.4.0) #&gt; cli 1.0.0 2017-11-05 cran (@1.0.0) #&gt; colorspace 1.3-2 2016-12-14 CRAN (R 3.4.0) #&gt; compiler 3.4.4 2018-03-15 local #&gt; crayon 1.3.4 2017-09-16 cran (@1.3.4) #&gt; curl 3.1 2017-12-12 CRAN (R 3.4.3) #&gt; DBI 0.8 2018-04-22 Github (jimhester/DBI@17f7e8f) #&gt; dbplyr 1.2.1 2018-02-19 CRAN (R 3.4.3) #&gt; debugme 1.1.0 2017-10-22 cran (@1.1.0) #&gt; dichromat 2.0-0 2013-01-24 CRAN (R 3.4.0) #&gt; digest 0.6.15 2018-01-28 CRAN (R 3.4.3) #&gt; dplyr 0.7.4 2017-09-28 CRAN (R 3.4.2) #&gt; evaluate 0.10.1 2017-06-24 cran (@0.10.1) #&gt; forcats 0.3.0 2018-02-19 CRAN (R 3.4.3) #&gt; foreign 0.8-69 2017-06-22 CRAN (R 3.4.4) #&gt; ggplot2 2.2.1.9000 2018-06-21 Github (tidyverse/ggplot2@1c09bae) #&gt; glue 1.2.0.9000 2018-06-25 Github (tidyverse/glue@a2c0f8b) #&gt; graphics * 3.4.4 2018-03-15 local #&gt; grDevices * 3.4.4 2018-03-15 local #&gt; grid 3.4.4 2018-03-15 local #&gt; gtable 0.2.0 2016-02-26 CRAN (R 3.4.0) #&gt; haven 1.1.1 2018-01-18 CRAN (R 3.4.3) #&gt; highr 0.6 2016-05-09 cran (@0.6) #&gt; hms 0.4.2 2018-03-10 cran (@0.4.2) #&gt; htmltools 0.3.6 2017-04-28 cran (@0.3.6) #&gt; httr 1.3.1 2017-08-20 CRAN (R 3.4.1) #&gt; jsonlite 1.5 2017-06-01 CRAN (R 3.4.0) #&gt; knitr 1.20 2018-02-20 CRAN (R 3.4.3) #&gt; labeling 0.3 2014-08-23 CRAN (R 3.4.0) #&gt; lattice 0.20-35 2017-03-25 CRAN (R 3.4.4) #&gt; lazyeval 0.2.1 2017-10-29 CRAN (R 3.4.2) #&gt; lubridate 1.7.4 2018-04-11 cran (@1.7.4) #&gt; magrittr 1.5 2014-11-22 cran (@1.5) #&gt; markdown 0.8 2017-04-20 cran (@0.8) #&gt; MASS 7.3-49 2018-02-23 CRAN (R 3.4.4) #&gt; Matrix 1.2-12 2017-11-30 CRAN (R 3.4.4) #&gt; methods 3.4.4 2018-03-15 local #&gt; mgcv 1.8-23 2018-01-21 CRAN (R 3.4.4) #&gt; mime 0.5 2016-07-07 CRAN (R 3.4.0) #&gt; mnormt 1.5-5 2016-10-15 CRAN (R 3.4.0) #&gt; modelr 0.1.1 2017-07-24 CRAN (R 3.4.1) #&gt; munsell 0.4.3 2016-02-13 CRAN (R 3.4.0) #&gt; nlme 3.1-131.1 2018-02-16 CRAN (R 3.4.4) #&gt; openssl 1.0.1 2018-03-03 CRAN (R 3.4.3) #&gt; parallel 3.4.4 2018-03-15 local #&gt; pillar 1.2.1 2018-02-27 cran (@1.2.1) #&gt; pkgconfig 2.0.1 2017-03-21 CRAN (R 3.4.0) #&gt; plogr 0.2.0 2018-03-25 CRAN (R 3.4.4) #&gt; plyr 1.8.4 2016-06-08 CRAN (R 3.4.0) #&gt; praise 1.0.0 2015-08-11 cran (@1.0.0) #&gt; psych 1.8.3.3 2018-03-30 cran (@1.8.3.3) #&gt; purrr 0.2.5 2018-05-29 cran (@0.2.5) #&gt; R6 2.2.2 2017-06-17 CRAN (R 3.4.0) #&gt; RColorBrewer 1.1-2 2014-12-07 CRAN (R 3.4.0) #&gt; Rcpp 0.12.17 2018-05-18 cran (@0.12.17) #&gt; readr 1.1.1 2017-05-16 CRAN (R 3.4.0) #&gt; readxl 1.0.0 2017-04-18 CRAN (R 3.4.0) #&gt; rematch 1.0.1 2016-04-21 CRAN (R 3.4.0) #&gt; reprex 0.1.2 2018-01-26 CRAN (R 3.4.3) #&gt; reshape2 1.4.3 2017-12-11 CRAN (R 3.4.3) #&gt; rlang 0.2.0.9001 2018-06-25 Github (tidyverse/rlang@ba4fb06) #&gt; rmarkdown 1.9 2018-03-01 cran (@1.9) #&gt; rprojroot 1.3-2 2018-01-03 cran (@1.3-2) #&gt; rstudioapi 0.7 2017-09-07 CRAN (R 3.4.1) #&gt; rvest 0.3.2 2016-06-17 CRAN (R 3.4.0) #&gt; scales 0.5.0.9000 2018-03-10 Github (hadley/scales@d767915) #&gt; selectr 0.3-2 2018-03-05 CRAN (R 3.4.4) #&gt; stats * 3.4.4 2018-03-15 local #&gt; stringi 1.2.2 2018-05-02 cran (@1.2.2) #&gt; stringr 1.3.1 2018-05-10 cran (@1.3.1) #&gt; testthat 2.0.0 2017-12-13 cran (@2.0.0) #&gt; tibble 1.4.2 2018-01-22 cran (@1.4.2) #&gt; tidyr 0.8.0 2018-01-29 CRAN (R 3.4.3) #&gt; tidyselect 0.2.4 2018-02-26 CRAN (R 3.4.3) #&gt; tidyverse 1.2.1 2017-11-14 CRAN (R 3.4.2) #&gt; tools 3.4.4 2018-03-15 local #&gt; utf8 1.1.3 2018-01-03 cran (@1.1.3) #&gt; utils * 3.4.4 2018-03-15 local #&gt; viridisLite 0.3.0 2018-02-01 CRAN (R 3.4.3) #&gt; whisker 0.3-2 2013-04-28 CRAN (R 3.4.0) #&gt; withr 2.1.2 2018-06-21 Github (r-lib/withr@dbcd7cd) #&gt; xml2 1.2.0 2018-01-24 CRAN (R 3.4.3) #&gt; yaml 2.1.18 2018-03-08 cran (@2.1.18) "],
["base-r.html", "Chapter 2 Base R 2.1 Running R code", " Chapter 2 Base R 2.1 Running R code 도움말 Getting Help 도움말 보기 ?mean “특정함수”에 대한 도움말 보기 help.search(‘weighted mean’) “특정 용어”에 대한 도움말 검색 help(package = ‘dplyr’) “특정 패키지”에 대한 도움말 보기 객체에 대한 정보 보기 str(iris) 객체 구조에 대한 요약정보 보기 class(iris) 객체의 class 조회 패키지 Using Packages install.packages(‘dplyr’) Download and install a package from CRAN. library(‘dplyr’) Load the package, making all its functions available to use. dplyr::select Use a particular function from a package data(iris) Load a built-in dataset into the environment. 워킹디렉토리 Working Directory getwd() Find the current working directory. setwd(‘D://file/path’) Change the current working directory. Use Projects in RStudio to set the working directory to the folder you are working in. Vectors Creating Vectors c(2, 4, 6) # Join elements into a vector #&gt; [1] 2 4 6 2:6 # An interger sequence #&gt; [1] 2 3 4 5 6 seq(2, 3, by=0.5) # A complex sequence #&gt; [1] 2.0 2.5 3.0 rep(1:2, times=3) # Repeat a vector #&gt; [1] 1 2 1 2 1 2 rep(1:2, each=3) # Repeat elements of a vector #&gt; [1] 1 1 1 2 2 2 Vector Functions x &lt;- c(3,2,6,1,6,2) sort(x) #&gt; [1] 1 2 2 3 6 6 rev(x) #&gt; [1] 2 6 1 6 2 3 table(x) #&gt; x #&gt; 1 2 3 6 #&gt; 1 2 1 2 unique(x) #&gt; [1] 3 2 6 1 Selecting Vector Elements By Position x &lt;- c(3,2,6,1,6,2) x[4] #&gt; [1] 1 x[-4] #&gt; [1] 3 2 6 6 2 x[2:4] #&gt; [1] 2 6 1 x[-(2:4)] #&gt; [1] 3 6 2 x[c(1,5)] #&gt; [1] 3 6 By Value x &lt;- c(3,2,6,1,6,2) x[x==6] #&gt; [1] 6 6 x[x&lt;3] #&gt; [1] 2 1 2 x[x %in% c(2,6)] #&gt; [1] 2 6 6 2 Named Vectors x[&#39;apple&#39;] 프로그래밍 Programming For Loop for (variable in sequance){ Do something } for (i in 1:4){ j &lt;- i + 10 print(j) } #&gt; [1] 11 #&gt; [1] 12 #&gt; [1] 13 #&gt; [1] 14 While Loop while (condition){ Do something } while (i &lt; 5){ print(i) i &lt;- i + 1 } #&gt; [1] 4 If Statements if (condition){ Do something } else { Do something different } i = 5 if (i &gt; 3){ print(&#39;Yes&#39;) } else { print(&#39;No&#39;) } #&gt; [1] &quot;Yes&quot; Functions function_name &lt;- function(var){ Do something return(new_variable) } square &lt;- function(x){ squared &lt;- x * x return(squared) } square(5) #&gt; [1] 25 Condtions a == b a != b a &gt; b a &lt; b a &gt;= b a &lt;= b is.na(a) is.null(a) a &lt;- c(1, 4, NA, 6) is.na(a) #&gt; [1] FALSE FALSE TRUE FALSE is.null(a) #&gt; [1] FALSE 파일 입출력 Reading and Writing Data ## create txt file # fileConn&lt;-file(&quot;file.txt&quot;) # writeLines(c(&quot;Hello&quot;,&quot;World&quot;), fileConn) # close(fileConn) df &lt;- c(&quot;Hello&quot;,&quot;World&quot;) write.table(df, &#39;file2.txt&#39;) df2 &lt;- read.table(&#39;file2.txt&#39;) print(df2) #&gt; x #&gt; 1 Hello #&gt; 2 World df &lt;- c(&quot;apple&quot;,&quot;graph&quot;) write.csv(df, &#39;file3.csv&#39;) df3 &lt;- read.csv(&#39;file3.csv&#39;) print(df3) #&gt; X x #&gt; 1 1 apple #&gt; 2 2 graph df &lt;- c(&quot;apple3&quot;,&quot;graph3&quot;) save(df, file = &#39;file4.Rdata&#39;) load(&#39;file4.Rdata&#39;) print(df) #&gt; [1] &quot;apple3&quot; &quot;graph3&quot; 객체 타입 Types Coverting between common data types in R. Can always go from a higher value i the table to a lower value a &lt;- c(TRUE, FALSE, TRUE) print(a) #&gt; [1] TRUE FALSE TRUE typeof(a) #&gt; [1] &quot;logical&quot; a &lt;- as.numeric(a) print(a) #&gt; [1] 1 0 1 typeof(a) #&gt; [1] &quot;double&quot; a &lt;- as.logical(a) print(a) #&gt; [1] TRUE FALSE TRUE typeof(a) #&gt; [1] &quot;logical&quot; a &lt;- as.character(a) print(a) #&gt; [1] &quot;TRUE&quot; &quot;FALSE&quot; &quot;TRUE&quot; typeof(a) #&gt; [1] &quot;character&quot; a &lt;- as.factor(a) print(a) #&gt; [1] TRUE FALSE TRUE #&gt; Levels: FALSE TRUE typeof(a) #&gt; [1] &quot;integer&quot; Math Functions log(x) sum(x) exp(x) mean(x) median(x) max(x) min(x) round(x, n) rank(x) signif(x, n) var(x) cor(x, y) sd(x) Variable Assignment a &lt;- &#39;apple&#39; a #&gt; [1] &quot;apple&quot; The Environment rm(list = ls()) a &lt;- &quot;apple&quot; b &lt;- c(1,2,3) c &lt;- 1 ls() #&gt; [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; rm(a) ls() #&gt; [1] &quot;b&quot; &quot;c&quot; rm(list = ls()) You can use the environment panel in RStudio to browse variable in your environment. 매트릭스 Matrices matrix basic m &lt;- matrix(x, nrow = 3, ncol = 3) matrix 생성 m[2, ] Select a row m[ , 1] Select a column m[2, 3] Select an element matrix 연산 t(m) Transpose m %*% n Matrix Muliplication solve(m, n) Find x in: m * x = n Lists A list is a collection of elements which can be of different types. # List 생성 l &lt;- list(x = 1:5, y = c(&#39;a&#39;,&#39;b&#39;)) l #&gt; $x #&gt; [1] 1 2 3 4 5 #&gt; #&gt; $y #&gt; [1] &quot;a&quot; &quot;b&quot; # List subset l[[2]] #&gt; [1] &quot;a&quot; &quot;b&quot; l[1] #&gt; $x #&gt; [1] 1 2 3 4 5 l$x #&gt; [1] 1 2 3 4 5 l[&#39;y&#39;] #&gt; $y #&gt; [1] &quot;a&quot; &quot;b&quot; Data Frames A special case of list where all elements are the same length. # Data Frame 생성 df &lt;- data.frame(x=1:3, y = c(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;)) df #&gt; x y #&gt; 1 1 a #&gt; 2 2 b #&gt; 3 3 c # Understanding a data frame # View(df) head(df, 2) #&gt; x y #&gt; 1 1 a #&gt; 2 2 b nrow(df) #&gt; [1] 3 ncol(df) #&gt; [1] 2 dim(df) #&gt; [1] 3 2 Matrix subsetting df[ , 2] df[2, ] df[2, 2] df$x df[[2]] Binding data frames cbind Bind columns rbind Bind rows A &lt;- data.frame(x=1:3, y=c(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;)) B &lt;- data.frame(y=11:13) C &lt;- data.frame(x=4:5, y=c(&#39;d&#39;,&#39;e&#39;)) cbind(A, B) #&gt; x y y #&gt; 1 1 a 11 #&gt; 2 2 b 12 #&gt; 3 3 c 13 rbind(A, C) #&gt; x y #&gt; 1 1 a #&gt; 2 2 b #&gt; 3 3 c #&gt; 4 4 d #&gt; 5 5 e Strings # paste x = &quot;Hello&quot; y = &quot;World!&quot; z = &quot;My name is DK&quot; paste(x, y) #&gt; [1] &quot;Hello World!&quot; paste(x, y, sep=&#39;&#39;) #&gt; [1] &quot;HelloWorld!&quot; paste(x, y, sep=&#39;-&#39;) #&gt; [1] &quot;Hello-World!&quot; paste(z, collapse=&#39; &#39;) #&gt; [1] &quot;My name is DK&quot; # Find regular expression matches in x. pattern = &quot;DK&quot; replace = &quot;Dookyung&quot; grep(pattern, z) #&gt; [1] 1 # replace matches in x with a string. gsub(pattern, replace, z) #&gt; [1] &quot;My name is Dookyung&quot; toupper(replace) #&gt; [1] &quot;DOOKYUNG&quot; tolower(replace) #&gt; [1] &quot;dookyung&quot; nchar(replace) #&gt; [1] 8 Factors # Factors factor(x) cut(x, breaks = 4) Statistics lm(y ~ x, data=df) Linear model. glm(y ~ x, data=df) Generalised linear model. summary(x) Get more detailed information out a model. t.test(x, y) Perform a t-test for different between means pairwise.t.test() Perform a t-test for paired data. prop.test Test for a difference between proportions. aov Analysis of variance. Factors # Factors factor(x) cut(x, breaks = 4) Statistics lm(y ~ x, data=df) Linear model. glm(y ~ x, data=df) Generalised linear model. summary(x) Get more detailed information out a model. t.test(x, y) Perform a t-test for different between means pairwise.t.test() Perform a t-test for paired data. prop.test Test for a difference between proportions. aov Analysis of variance. Distributions Table 2.1: Distribution table kind Random_Var Density_Func Cumulative_Dist Quantile Normal rnorm dnorm pnorm qnorm Poisson rpois dpois ppois qpois Binomial rbinom dbinom pbinom qbinom Uniform runif dunif punif qunif Plotting x &lt;- rnorm(30) y &lt;- rnorm(30) + 1:30 par(mfrow=c(1,2)) plot(x) plot(y, x) duration = faithful$eruptions hist(duration, right=FALSE) "],
["data-import.html", "Chapter 3 Data Import 3.1 Basics 3.2 Write Functions 3.3 Read Functions 3.4 fread() for bigger datasets 3.5 data.frame 3.6 Three data frame alternatives 3.7 tibble 3.8 ‘scan()’ for small vectors and snippets 3.9 Other types of data", " Chapter 3 Data Import 3.1 Basics readr, tibble, and tidyr R’s tidyverse is built around tidy data stored in tibbles, an enhanced version of a data frame. Readr : The front side of this sheet shows how to read text files into R with readr. tidyr : The reverse side shows how to create tibbles with tibble and to layout tidy data with tidyr. 3.2 Write Functions Save x, an R object, to path, a file path, with: These functions share the common arguments: write_*(x, path, na=&quot;NA&quot;, append=FALSE, col_names=!append) Table 3.1: Write functions func delim arguments write_csv , write_delim any delim=“…” write_excel_csv write_file write_lines write_rds compress=c(“none”,“gz”,“bz2”,“xz”) write_tsv tab 3.3 Read Functions These functions share the common arguments: read_*(file, col_names=TRUE, col_types=NULL, locale=default_locale(), na=c(“”,“NA”), quoted_na=TRUE, comment=“”, trim_ws=TRUE, skip=0, n_max=inf, guess_max=min(1000, n_max), progress=interative()) 3.3.1 Read tabular data tibbles read_csv() Reads comma delimited files read_csv2() Reads Semi-colon delimited files read_delim(delim, quote=“&quot;, escape_backslash=FALSE, escape_double=TRUE) Reads files with any delimeters read_fwf(col_positions) Reads fixed width files read_tsv() Reads tab delimited files 3.3.2 Useful arguments write_csv(path=&#39;file.csv&#39;, x = read_csv(&quot;a,b,c\\n1,2,3\\n4,5,NA&quot;)) read_csv(&quot;file.csv&quot;, col_names=FALSE) read_csv(&quot;file.csv&quot;, col_names=c(&quot;x&quot;,&quot;y&quot;,&quot;z&quot;)) read_csv(&quot;file.csv&quot;, skip=1) read_csv(&quot;file.csv&quot;, n_max=1) read_csv(&quot;file.csv&quot;, na=c(&quot;4&quot;,&quot;5&quot;,&quot;.&quot;)) 3.4 fread() for bigger datasets set working directory packages “data.table” handles large datasets fast easy to use improved .CSV importing features separator is automatically recognised strings are not automaticall convertied to factors | ‘stringsAsFactors=T’ the header is displayed automaticall output: ‘data.frame’ (second class: ‘data.frame’) | ‘data.table=F’ library(data.table) #&gt; #&gt; Attaching package: &#39;data.table&#39; #&gt; The following objects are masked from &#39;package:dplyr&#39;: #&gt; #&gt; between, first, last #&gt; The following object is masked from &#39;package:purrr&#39;: #&gt; #&gt; transpose mydata = fread(&quot;./data/Bug-Frequency.csv&quot;) mydata #&gt; region &lt; 10 g 10 - 20 g 20 - 30 g 30 - 40 g &gt; 40 g #&gt; 1: Welsh Creek 5 34 54 23 8 #&gt; 2: River Inn 72 33 28 35 9 #&gt; 3: Spur Forest 34 65 23 67 2 #&gt; 4: Hamock Flats 28 23 34 45 11 #&gt; 5: Gelb Rocks 34 68 23 58 9 World population df = fread(&quot;1 Singapore 5,612,300 710 7,905 2 Bangladesh 164,170,000 143,998 1,140 3 Taiwan 23,562,318 36,190 651 4 South Korea 51,446,201 99,538 517 5 Lebanon 6,082,000 10,452 582 6 Rwanda 11,809,295 26,338 448 7 Netherlands 17,200,000 41,526 414 8 Haiti 10,911,819 27,065 403 9 India 1,329,250,000 3,287,240 404 10 Israel 8,830,000 22,072 400&quot;, col.names = c(&quot;Rank&quot;, &quot;Country&quot;,&quot;Population&quot;, &quot;Area(km2)&quot;,&quot;Density(Pop. per km2)&quot; )) df #&gt; Rank Country Population Area(km2) Density(Pop. per km2) #&gt; 1: 1 Singapore 5,612,300 710 7,905 #&gt; 2: 2 Bangladesh 164,170,000 143,998 1,140 #&gt; 3: 3 Taiwan 23,562,318 36,190 651 #&gt; 4: 4 South Korea 51,446,201 99,538 517 #&gt; 5: 5 Lebanon 6,082,000 10,452 582 #&gt; 6: 6 Rwanda 11,809,295 26,338 448 #&gt; 7: 7 Netherlands 17,200,000 41,526 414 #&gt; 8: 8 Haiti 10,911,819 27,065 403 #&gt; 9: 9 India 1,329,250,000 3,287,240 404 #&gt; 10: 10 Israel 8,830,000 22,072 400 3.5 data.frame the mainly used object type straightforward sttucture one row for each observation one column for each variable R offers different data frame classes similar to R’s data visualization systems: ‘R-base’ ‘lattice’ ‘ggplot2’ 3.6 Three data frame alternatives ‘data.frame()’ function in ‘R-base’ ‘data.table()’ function in the package ‘data.table’ ‘data_frame()’ function in the package ‘dplyr’ each of them is suitabl for storing most data - Let’s see their specialities 3.6.1 data.frame no external package needed straightforward for simple tasks strings are stored as factors per default data recycling row names can be provided mydf = data.frame( a = c(&quot;Paul&quot;, &quot;Kim&quot;,&quot;Nora&quot;,&quot;Sue&quot;,&quot;Paul&quot;,&quot;Kim&quot;), b = c(&quot;A&quot;, &quot;B&quot;,&quot;C&quot;,&quot;B&quot;,&quot;B&quot;,&quot;C&quot;), c = rnorm(2) ) mydf #&gt; a b c #&gt; 1 Paul A -1.400 #&gt; 2 Kim B 0.255 #&gt; 3 Nora C -1.400 #&gt; 4 Sue B 0.255 #&gt; 5 Paul B -1.400 #&gt; 6 Kim C 0.255 sapply(mydf, class) #&gt; a b c #&gt; &quot;factor&quot; &quot;factor&quot; &quot;numeric&quot; 3.6.2 data.table quick and easy to code start processing time great documentation second class ‘data.frame’ ‘data.table’ struction is similar to SQL structure ‘nameDT [i, j, by]’ ‘i’ stands for the subset from our ‘data.table’ we want to work with ‘j’ is the actual calculation that will be performed in the data subset ‘i’ the whole calculation is grouped by ’by strings are not automatically transfromed to factors no custom row names, just row IDs if a dataset is too big to be processed, then only the first and last five rows are printed library(data.table) mytable = data.frame( a = c(&quot;Paul&quot;, &quot;Kim&quot;,&quot;Nora&quot;,&quot;Sue&quot;,&quot;Paul&quot;,&quot;Kim&quot;), b = c(&quot;A&quot;, &quot;B&quot;,&quot;C&quot;,&quot;B&quot;,&quot;B&quot;,&quot;C&quot;), c = rnorm(2) ) mytable #&gt; a b c #&gt; 1 Paul A -2.43726 #&gt; 2 Kim B -0.00557 #&gt; 3 Nora C -2.43726 #&gt; 4 Sue B -0.00557 #&gt; 5 Paul B -2.43726 #&gt; 6 Kim C -0.00557 3.6.3 data_frame requires equals column length only columns of length 1 will be recycled only the firs couple of rows are displayed in case of large datasets second class: ‘data.frame’ stirngs are not automatically transformed to factors no custom row names, just row IDs library(dplyr) my_df = data.frame( a = c(&quot;Paul&quot;, &quot;Kim&quot;,&quot;Nora&quot;,&quot;Sue&quot;,&quot;Paul&quot;,&quot;Kim&quot;), b = c(&quot;A&quot;, &quot;B&quot;,&quot;C&quot;,&quot;B&quot;,&quot;B&quot;,&quot;C&quot;), c = rnorm(6) ) my_df #&gt; a b c #&gt; 1 Paul A 0.622 #&gt; 2 Kim B 1.148 #&gt; 3 Nora C -1.822 #&gt; 4 Sue B -0.247 #&gt; 5 Paul B -0.244 #&gt; 6 Kim C -0.283 3.6.4 Summary class(mydf); class(mytable); class(my_df) #&gt; [1] &quot;data.frame&quot; #&gt; [1] &quot;data.frame&quot; #&gt; [1] &quot;data.frame&quot; it is benefically to use advanced tools for extended data management ‘data.table’ and ‘data_frame’ have the standard ‘data.frame’ as second class 3.7 tibble 3.7.1 nycflights13 To explore the basic data manipulation verbs of dplyr, we’ll use nycflights13::flights. This data frame contains all 336,776 flights that departed from New York City in 2013. The data comes from the US Bureau of Transportation Statistics, and is documented in ?flights. library(nycflights13) flights #&gt; # A tibble: 336,776 x 19 #&gt; year month day dep_time sched_dep_time dep_delay arr_time #&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; #&gt; 1 2013 1 1 517 515 2. 830 #&gt; 2 2013 1 1 533 529 4. 850 #&gt; 3 2013 1 1 542 540 2. 923 #&gt; 4 2013 1 1 544 545 -1. 1004 #&gt; 5 2013 1 1 554 600 -6. 812 #&gt; 6 2013 1 1 554 558 -4. 740 #&gt; # ... with 3.368e+05 more rows, and 12 more variables: #&gt; # sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, #&gt; # tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, #&gt; # distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt; You might notice that this data frame prints a little differently from other data frames you might have used in the past: it only shows the first few rows and all the columns that fit on one screen. (To see the whole dataset, you can run View(flights) which will open the dataset in the RStudio viewer). It prints differently because it’s a tibble. Tibbles are data frames, but slightly tweaked to work better in the tidyverse. For now, you don’t need to worry about the differences; we’ll come back to tibbles in more detail in wrangle. You might also have noticed the row of three (or four) letter abbreviations under the column names. These describe the type of each variable: int stands for integers. dbl stands for doubles, or real numbers. chr stands for character vectors, or strings. dttm stands for date-times (a date + a time). lgl stands for logical, vectors that contain only TRUE or FALSE. fctr stands for factors, which R uses to represent categorical variables with fixed possible values. date stands for dates. 3.8 ‘scan()’ for small vectors and snippets numbers = scan() # characters = scan(what= &quot;character&quot;) 3.9 Other types of data Try one of the following packages to import other types of files. haven : SPSS, Stata, and SAS files readxl : excel files (.xls and .xlsx) DBI : databases jsonlite : json xml2 : XML httr : Web APIs rvest : HTML(Web Scraping) packages ‘foreing’ to get help : ?foreign ?Hmisc "]
]
